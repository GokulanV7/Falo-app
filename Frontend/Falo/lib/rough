import 'dart:async';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:uuid/uuid.dart';
import 'package:lottie/lottie.dart';

import 'package:anewdehli12/models/chat_message.dart';
import 'package:anewdehli12/services/misinformation_service.dart';
import 'package:anewdehli12/widgets/message_bubble.dart';
import 'package:anewdehli12/theme_notifier.dart';

class ChatScreen extends StatefulWidget {
  const ChatScreen({super.key});

  @override
  State<ChatScreen> createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen> with TickerProviderStateMixin {
  final TextEditingController _textController = TextEditingController();
  final MisinformationService _misinformationService = MisinformationService();
  final List<ChatMessage> _messages = [];
  final GlobalKey<AnimatedListState> _listKey = GlobalKey<AnimatedListState>();
  final ScrollController _scrollController = ScrollController();
  final Uuid _uuid = const Uuid();
  bool _isLoading = false;
  late AnimationController _sendButtonController;

  @override
  void initState() {
    super.initState();
    _sendButtonController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 300),
    );
    _addWelcomeMessage();
  }

  void _addWelcomeMessage() {
    final welcomeMessage = ChatMessage(
      id: _uuid.v4(),
      type: MessageType.bot,
      text: "Hello! I'm Falo, your misinformation detection assistant. "
          "Send me any text or URL to analyze its credibility.",
    );
    _addMessageToList(welcomeMessage, delay: 1000);
  }

  @override
  void dispose() {
    _textController.dispose();
    _scrollController.dispose();
    _sendButtonController.dispose();
    super.dispose();
  }

  Future<void> _sendMessage() async {
    final text = _textController.text.trim();
    if (text.isEmpty || _isLoading) return;

    _sendButtonController.forward().then(
          (_) => _sendButtonController.reverse(),
    );

    _textController.clear();
    FocusScope.of(context).unfocus();

    final userMessage = ChatMessage(
      id: _uuid.v4(),
      type: MessageType.user,
      text: text,
    );
    _addMessageToList(userMessage);

    final loadingMessage = ChatMessage.loading();
    _addMessageToList(loadingMessage);

    setState(() => _isLoading = true);
    _scrollToBottom(delayMilliseconds: 100);

    try {
      final botResponseData = await _misinformationService
          .analyzeText(text)
          .timeout(const Duration(seconds: 30));

      _removeLoadingMessage();

      final botMessage = ChatMessage(
        id: _uuid.v4(),
        type: MessageType.bot,
        botResponseData: botResponseData,
      );
      _addMessageToList(botMessage);
    } catch (e) {
      _removeLoadingMessage();
      _handleError(e);
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
      _scrollToBottom(delayMilliseconds: 300);
    }
  }

  void _removeLoadingMessage() {
    final loadingIndex = _messages.indexWhere(
          (m) => m.type == MessageType.loading,
    );
    if (loadingIndex != -1) {
      _messages.removeAt(loadingIndex);
      _listKey.currentState?.removeItem(
        loadingIndex,
            (context, animation) => const SizedBox.shrink(),
      );
    }
  }

  void _handleError(dynamic e) {
    String errorMessageText;
    if (e is FormatException) {
      errorMessageText = "Error: Received invalid data format from server.";
    } else if (e is TimeoutException) {
      errorMessageText = "Error: Request timed out. Please try again.";
    } else if (e is SocketException) {
      errorMessageText = "Error: Cannot connect to server.";
    } else if (e is HttpException) {
      errorMessageText = "Error: ${e.message}";
    } else {
      errorMessageText = "An unexpected error occurred. Please try again.";
    }

    final errorMessage = ChatMessage(
      id: _uuid.v4(),
      type: MessageType.error,
      text: errorMessageText,
    );
    _addMessageToList(errorMessage);
  }

  void _addMessageToList(ChatMessage message, {int delay = 0}) {
    if (!mounted) return;

    Future.delayed(Duration(milliseconds: delay), () {
      if (!mounted || _listKey.currentState == null) return;

      final index = _messages.length;
      _messages.add(message);
      _listKey.currentState!.insertItem(
        index,
        duration: const Duration(milliseconds: 450),
      );
      _scrollToBottom(delayMilliseconds: 100);
    });
  }

  void _scrollToBottom({int delayMilliseconds = 100}) {
    if (!mounted) return;
    Future.delayed(Duration(milliseconds: delayMilliseconds), () {
      if (_scrollController.hasClients) {
        _scrollController.animateTo(
          _scrollController.position.maxScrollExtent,
          duration: const Duration(milliseconds: 350),
          curve: Curves.easeOutCubic,
        );
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return _buildChatScreen(context);
  }

  Widget _buildChatScreen(BuildContext context) {
    final theme = Theme.of(context);
    final themeNotifier = Provider.of<ThemeNotifier>(context, listen: false);
    final currentBrightness = Theme.of(context).brightness;

    return Scaffold(
      appBar: AppBar(
        leading: Padding(
          padding: const EdgeInsets.only(left: 8.0),
          child: Lottie.asset(
            'images/robo.json',
            width: 40,
            height: 40,
            repeat: true,
          ),
        ),
        title: const Text(
          'Falo',
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        actions: [
          IconButton(
            icon: AnimatedSwitcher(
              duration: const Duration(milliseconds: 300),
              child: Icon(
                currentBrightness == Brightness.dark
                    ? Icons.light_mode
                    : Icons.dark_mode,
                key: ValueKey(currentBrightness),
              ),
            ),
            onPressed: () {
              final newPreference =
              currentBrightness == Brightness.dark
                  ? ThemePreference.light
                  : ThemePreference.dark;
              themeNotifier.switchTheme(newPreference);
            },
          ),
        ],
      ),
      body: Column(
        children: [
          Expanded(
            child: GestureDetector(
              onTap: () => FocusScope.of(context).unfocus(),
              child: AnimatedList(
                key: _listKey,
                controller: _scrollController,
                padding: const EdgeInsets.symmetric(vertical: 10.0),
                initialItemCount: _messages.length,
                itemBuilder: (context, index, animation) {
                  if (index >= _messages.length) return const SizedBox.shrink();
                  final message = _messages[index];
                  return MessageBubble(
                    key: ValueKey(message.id),
                    message: message,
                    animation: animation,
                  );
                },
              ),
            ),
          ),
          _buildInputArea(theme),
        ],
      ),
    );
  }

  Widget _buildInputArea(ThemeData theme) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 12.0, vertical: 10.0),
      margin: EdgeInsets.only(
        bottom: MediaQuery.of(context).viewInsets.bottom > 0 ? 0 : 5,
      ),
      decoration: BoxDecoration(
        color: theme.colorScheme.surface.withOpacity(0.95),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 10,
            offset: const Offset(0, -2),
          ),
        ],
      ),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.end,
        children: [
          Expanded(
            child: TextField(
              controller: _textController,
              decoration: InputDecoration(
                hintText: 'Enter text or URL...',
                filled: true,
                fillColor: theme.colorScheme.surfaceVariant.withOpacity(0.5),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(25.0),
                  borderSide: BorderSide.none,
                ),
                contentPadding: const EdgeInsets.symmetric(
                  horizontal: 20.0,
                  vertical: 14.0,
                ),
                suffixIcon:
                _isLoading
                    ? Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Lottie.asset(
                    'images/robo.json',
                    width: 30,
                    height: 30,
                  ),
                )
                    : null,
              ),
              onSubmitted: (_) => _sendMessage(),
              textInputAction: TextInputAction.send,
              keyboardType: TextInputType.multiline,
              minLines: 1,
              maxLines: 5,
              enabled: !_isLoading,
            ),
          ),
          const SizedBox(width: 8.0),
          AnimatedBuilder(
            animation: _sendButtonController,
            builder: (context, child) {
              return Transform.scale(
                scale: 1.0 - (_sendButtonController.value * 0.2),
                child: child,
              );
            },
            child: SizedBox(
              height: 48,
              child: IconButton(
                icon: Icon(
                  Icons.send_rounded,
                  color:
                  _isLoading
                      ? theme.disabledColor
                      : theme.colorScheme.primary,
                ),
                onPressed: _isLoading ? null : _sendMessage,
                tooltip: 'Send Analysis Request',
                splashRadius: 24,
                padding: const EdgeInsets.all(12),
              ),
            ),
          ),
        ],
      ),
    );
  }
}